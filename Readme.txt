Проект FlatReaver 

***Описание***

Демонстрирует возможности Net.Core в рамках проекта REST API на примере системы 
обработки риелторов и их департаментов. 

Включает пример реализации DI посредством IoC Autofac, используется в классах коннекторов
для инъекции объекта Store в поля в типом IStore

В качестве фреймворка ORM используется EF core, конфигурирование сущностей проводится 
в классе StorageContext с применением расширений Fluent API. 

Слой доступа к данным представлен объектом Store интерфейса IStore, все методы построены 
на базе дженериков. Для нормальной работы приложения не требуется модификации методов
доступа к данным, достаточно объявить модели и сконфигурировать их так, чтобы EF Core 
сконфигурировал БД по парадигме CodeFirst. Выбор данных осуществляется передачей в методы 
Read или ReadSingle объекта-прототипа, в котором присвоены образцы свойств, как это сделано,
например, в маппере данных Dapper.

Логгер представлен примитивным консольным логгером, рекомендуется использовать свой 
привычный логгер, например NLog или Log4Net, декорированный объектом интерфейса Ilogger. 

Внимание, инъекции через IoC контейнеры в ILogger не проводится.

Доступ к API предоставляется в авторизованном виде. Get выполняется для ролей User и Admin,

Все тесты в решении интеграционные, в связи с отсутствием бизнес-логики. Для их нормальной
работы требуется подготовка БД: таблицы тестовой бд должны быть пустыми, таблицы продакшн
БД "Из коробки" должны быть сконфигурированы скриптом SQLSetUp, который поставляется вместе
с данным решением.

Тесты построены на базе фреймворка xUnit.

Для авторизации используются авторизационные JWT токены. Рефреш токены не используются в 
данной версии. Пароли хранятся в БД в виде строкового Hex представления MD5 хэша от пароля.
Сервиса создания пользователей и ролей в настоящей версии решения не предусмотрено.

***Развертывание***

В качестве СУБД используется MS SQL Server, строка подключения указывается обособленно в 
Config.json основного проекта (продакшн БД) и в рабочем классе теста DataStore.Test
(тестовая БД).

В данном же конфиге представлены основные настройки JWT токенов. 

Конфигурирование основных настроек API выполняется в файле launchSettings.json. 

Среди зависимостей, не указанных выше, можно выделить пакет Newtonsoft.JSON.

Все зависимости загружены через PM Nuget. 

